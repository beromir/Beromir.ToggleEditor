/* States */

.loading {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: var(--spacing-GoldenUnit);
}

.highlight {
    outline: var(--colors-Warn) solid 2px;
    outline-offset: 2px;
    z-index: 2;
    border-radius: 2px;
}

:where(.grid, .flex, .color, .list) [disabled],
.disabled {
    cursor: not-allowed !important;
    opacity: 0.65 !important;

    & > * {
        pointer-events: none;
    }
}

.error {
    background-color: var(--colors-Error);
    color: var(--colors-ContrastBrightest);
    margin: 0 calc(var(--spacing-Full) * -1);
    padding: var(--spacing-Half) var(--spacing-Full);
}

/* Layouts */

.wrapper {
    user-select: none;
}

.flex {
    display: flex;
    gap: 1px;

    & > * {
        flex: auto;
    }
}

.color {
    display: grid;
    row-gap: 14px;
    column-gap: var(--spacing-Half);
    padding-top: var(--spacing-Quarter);
    grid-template-columns: repeat(var(--columns, 1), minmax(0, 1fr));
}

.grid {
    display: grid;
    gap: 1px;
    grid-template-columns: repeat(var(--columns, 1), minmax(0, 1fr));
}

.list {
    display: grid;
    gap: 12px;
    grid-template-columns: repeat(1, minmax(0, 1fr));

    & .image {
        width: auto;
        height: 1em;
        margin-right: var(--spacing-Half);
    }
}

/* Image */

.image {
    width: 100%;
    height: auto;
}

.imageSVG {
    width: 100%;
    display: flex;
    align-items: stretch;
    justify-content: stretch;
}

/* List button */

.listButton {
    display: flex;
    align-items: center;
    width: fit-content;
    color: var(--colors-ContrastBrightest);
    background-color: inherit;
    border: none;
    border-radius: 0;
    cursor: pointer;

    &:focus {
        outline: none;

        & .radio {
            outline: var(--colors-PrimaryBlue) solid 1px;
        }
    }

    &:where(.selected, :hover:not([disabled])) .radio {
        background-color: var(--colors-PrimaryBlue);
    }

    & svg {
        margin-right: var(--spacing-Half);
    }
}

/* Radio components */

.radio {
    display: flex;
    justify-content: center;
    align-items: center;
    margin-right: 12px;
    width: 22px;
    height: 22px;
    border-radius: 9999px;
    border: none;
    background-color: var(--colors-ContrastDark);
    pointer-events: none;

    & span {
        width: 6px;
        height: 6px;
        background-color: var(--colors-ContrastBrightest);
        border-radius: 9999px;
    }
}

/* Color items */

.colorBox {
    display: flex;
    flex-direction: column;
    align-items: center;
    row-gap: var(--spacing-Quarter);
}

.colorButton {
    cursor: pointer;
    width: 100%;
    height: var(--spacing-GoldenUnit);
    max-width: 60px;
    border: none;
    border-radius: var(--spacing-Quarter);
    outline: var(--colors-ContrastNeutral) solid 1px;

    &:where(:hover:not([disabled]), :focus, .selected) {
        outline: var(--colors-PrimaryBlue) solid 2px;
        outline-offset: 2px;
    }

    &:focus {
        outline-offset: 1px;
        outline-width: 1px;
    }
}

.colorTransparent {
    background-size: 14px;
    background-image: url('data:image/svg+xml, <svg width="100" height="100" viewBox="0 0 100 100" fill="none" xmlns="http://www.w3.org/2000/svg"><rect width="100" height="100" fill="%23F5F5F5"/><rect width="50" height="50" fill="%23d4d4d4"/><rect x="50" y="50" width="50" height="50" fill="%23d4d4d4"/></svg>');
}

/* General items */

.button {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 12px;
    height: auto;

    & > * + * {
        margin-top: 6px;
    }

    &:focus {
        outline: var(--colors-PrimaryBlue) solid 1px;
        z-index: 1;
        border-radius: 2px;
    }

    & .imageFull:only-child {
        margin: -12px;
    }
}

.label {
    font-size: var(--fontSize-Small);
}

/* Allow empty */

.allowEmpty,
.allowEmptyRadio {
    position: absolute;
    z-index: 1;
    display: flex;
    justify-content: center;
    align-items: center;
    width: 20px;
    height: 20px;
    margin: 0 !important;
    transition: opacity var(--transition-Default) ease;
    pointer-events: none;
    right: 0;
    opacity: 0;

    & svg {
        color: var(--colors-ContrastBrightest);
    }
}

.allowEmpty {
    top: -10px;
    right: -10px;
    background-color: var(--colors-ContrastDark);
    border-radius: 9999px;
}

.allowEmptyShow {
    opacity: 1;
}

:where(.grid, .flex, .color) button {
    position: relative;

    &:is(:hover:not([disabled]), :focus) .allowEmpty {
        transform: scale(1.1);
    }
}

.list {
    position: relative;

    & button:is(:hover:not([disabled]), :focus) .allowEmptyRadio {
        transform: scale(1.1);
    }
}
