{
  "version": 3,
  "sources": ["../../node_modules/.pnpm/@neos-project+neos-ui-extensibility@8.3.10/node_modules/@neos-project/neos-ui-extensibility/src/readFromConsumerApi.ts", "../../node_modules/.pnpm/@neos-project+neos-ui-extensibility@8.3.10/node_modules/@neos-project/neos-ui-extensibility/src/shims/vendor/react/index.js", "../../node_modules/.pnpm/@neos-project+neos-ui-extensibility@8.3.10/node_modules/@neos-project/neos-ui-extensibility/src/shims/vendor/prop-types/index.js", "../../node_modules/.pnpm/@neos-project+neos-ui-extensibility@8.3.10/node_modules/@neos-project/neos-ui-extensibility/src/shims/neosProjectPackages/react-ui-components/index.js", "../../node_modules/.pnpm/@neos-project+neos-ui-extensibility@8.3.10/node_modules/@neos-project/neos-ui-extensibility/src/shims/neosProjectPackages/neos-ui-decorators/index.js", "../../node_modules/.pnpm/@neos-project+neos-ui-extensibility@8.3.10/node_modules/@neos-project/neos-ui-extensibility/src/shims/vendor/react-redux/index.js", "../../node_modules/.pnpm/@neos-project+neos-ui-extensibility@8.3.10/node_modules/@neos-project/neos-ui-extensibility/src/shims/neosProjectPackages/neos-ui-redux-store/index.js", "../../node_modules/.pnpm/@neos-project+neos-ui-extensibility@8.3.10/node_modules/@neos-project/neos-ui-extensibility/src/index.ts", "../Private/Editor/ToggleEditor/index.jsx", "../../node_modules/.pnpm/clsx@2.1.1/node_modules/clsx/dist/clsx.mjs", "../Private/Editor/manifest.js"],
  "sourcesContent": [null, null, null, null, null, null, null, null, "import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button, Icon, Label } from \"@neos-project/react-ui-components\";\nimport { neos } from \"@neos-project/neos-ui-decorators\";\nimport style from \"./style.module.css\";\nimport { connect } from \"react-redux\";\nimport { selectors } from \"@neos-project/neos-ui-redux-store\";\nimport clsx from \"clsx\";\n\nconst getDataLoaderOptionsForProps = (props) => ({\n    contextNodePath: props.focusedNodePath,\n    dataSourceIdentifier: props.options.dataSourceIdentifier,\n    dataSourceUri: props.options.dataSourceUri,\n    dataSourceAdditionalData: props.options.dataSourceAdditionalData,\n    dataSourceDisableCaching: Boolean(props.options.dataSourceDisableCaching),\n});\n\nconst defaultOptions = {\n    layout: \"grid\",\n    maximalColumns: 4,\n    values: {},\n    columns: null,\n    allowEmpty: false,\n    iconSize: null,\n    disabled: false,\n    hidden: false,\n    dataSourceIdentifier: null,\n    dataSourceUri: null,\n};\n\nfunction Editor(props) {\n    const mergedOptions = { ...defaultOptions, ...props.options };\n    const {\n        layout,\n        values,\n        columns,\n        maximalColumns,\n        allowEmpty,\n        iconSize,\n        disabled,\n        dataSourceIdentifier,\n        dataSourceUri,\n        dataSourceAdditionalData,\n    } = mergedOptions;\n    const { value, commit, highlight, i18nRegistry, id, dataSourcesDataLoader } = props;\n    const label = i18nRegistry.translate(props.label);\n\n    const hasDataSource = !!(dataSourceIdentifier || dataSourceUri);\n\n    const [isLoading, setIsLoading] = useState(hasDataSource);\n    const [options, setOptions] = useState(hasDataSource ? [] : flattenValues(values, layout, i18nRegistry));\n\n    // We use this hack to prevent the editor from re-rendering all the time, even if the options are the same.\n    const [dataSourceOptionsAsJSON, setDataSourceOptionsAsJSON] = useState(null);\n\n    useEffect(() => {\n        const dataAsJSON = JSON.stringify({ dataSourceIdentifier, dataSourceUri, dataSourceAdditionalData });\n        if (!hasDataSource || dataSourceOptionsAsJSON === dataAsJSON) {\n            return;\n        }\n\n        setDataSourceOptionsAsJSON(dataAsJSON);\n\n        // Load options from data source\n        dataSourcesDataLoader.resolveValue(getDataLoaderOptionsForProps(props), value).then((values) => {\n            setIsLoading(false);\n\n            if (layout === \"color\") {\n                setOptions(processColorValues(values));\n                return;\n            }\n            setOptions(values);\n        });\n    }, [dataSourceIdentifier, dataSourceUri, dataSourceAdditionalData]);\n\n    if (isLoading) {\n        return (\n            <>\n                <Label htmlFor={id}>{label}</Label>\n                <div\n                    id={id}\n                    className={clsx(style.wrapper, style.loading)}\n                    title={i18nRegistry.translate(\"Beromir.ToggleEditor:Main:loading\")}\n                >\n                    <Icon icon=\"spinner\" size=\"lg\" spin />\n                </div>\n            </>\n        );\n    }\n\n    if (options.hidden) {\n        return null;\n    }\n\n    if (!options || !options.length) {\n        return (\n            <>\n                <Label htmlFor={id}>{label}</Label>\n                <div id={id} className={clsx(style.wrapper, style.error)}>\n                    {i18nRegistry.translate(\n                        `Beromir.ToggleEditor:Main:error.${hasDataSource ? \"noDataFromSource\" : \"noNodeTypeDefintion\"}`,\n                    )}\n                </div>\n            </>\n        );\n    }\n\n    const resetLabel = i18nRegistry.translate(\"Beromir.ToggleEditor:Main:reset\");\n\n    function onChange(item, node) {\n        if (node) {\n            node.blur();\n        }\n        if (!item || (allowEmpty && value === item.value)) {\n            commit(\"\");\n            return;\n        }\n        commit(item.value);\n    }\n\n    const convertToColumns = (value, maximalColumns = 0) => {\n        if (typeof value === \"number\" && value > 0) {\n            return value;\n        }\n        const items = options.length || 1;\n        if (!value || typeof value !== \"string\") {\n            return items;\n        }\n        try {\n            value = value.replaceAll(\"{items}\", items);\n            if (maximalColumns) {\n                value = value.replaceAll(\"{maximalColumns}\", items);\n            }\n            // eslint-disable-next-line no-new-func\n            const evaluateFn = new Function(`return Math.floor(${value})`);\n            return evaluateFn();\n        } catch (e) {\n            console.warn('An error occurred while trying to evaluate \"' + value + '\"\\n', e);\n        }\n    };\n\n    const getColumns = () => {\n        const evaluatedColumns = convertToColumns(columns, maximalColumns);\n        const evaluatedMaximalColumns = convertToColumns(maximalColumns);\n        return { \"--columns\": Math.min(evaluatedColumns, evaluatedMaximalColumns) };\n    };\n\n    const getIcon = (item) =>\n        item.icon ? (\n            <Icon icon={item.icon} style={{ transform: `rotate(${item.iconRotate || 0}deg)` }} size={iconSize} />\n        ) : null;\n    const getTitle = (item) => i18nRegistry.translate(item.description || item.label);\n    const getAriaLabel = (item) => (allowEmpty && value === item.value ? resetLabel : getTitle(item));\n    const getAllowEmptyIcon = (item, className = style.allowEmpty) =>\n        allowEmpty ? (\n            <span className={clsx(className, value === item.value && style.allowEmptyShow)}>\n                <Icon size=\"sm\" icon=\"times\" />\n            </span>\n        ) : null;\n\n    return (\n        <>\n            <Label htmlFor={id}>{label}</Label>\n            <div className={clsx(style.wrapper, style[layout], disabled && style.disabled)} style={getColumns()}>\n                {options.map((item, index) => {\n                    const elementId = index === 0 ? id : null;\n                    const isCurrent = value === item.value;\n                    const disabled = item.disabled;\n                    const label = i18nRegistry.translate(item.label);\n                    switch (layout) {\n                        case \"list\":\n                            return (\n                                <button\n                                    id={elementId}\n                                    onClick={({ currentTarget }) => onChange(item, currentTarget)}\n                                    type=\"button\"\n                                    title={getTitle(item)}\n                                    aria-label={getAriaLabel(item)}\n                                    disabled={disabled}\n                                    className={clsx(style.listButton, isCurrent && style.selected)}\n                                >\n                                    <span className={clsx(style.radio, isCurrent && highlight && style.highlight)}>\n                                        <span></span>\n                                    </span>\n                                    {getIcon(item)}\n                                    {getPreview(item, i18nRegistry)}\n                                    {label && <span>{label}</span>}\n                                    {getAllowEmptyIcon(item, style.allowEmptyRadio)}\n                                </button>\n                            );\n\n                        case \"color\":\n                            const maxColorIndex = item.color.length - 1;\n                            return (\n                                <div className={style.colorBox}>\n                                    <button\n                                        id={elementId}\n                                        onClick={({ currentTarget }) => onChange(item, currentTarget)}\n                                        type=\"button\"\n                                        title={getTitle(item)}\n                                        aria-label={getAriaLabel(item)}\n                                        disabled={disabled}\n                                        className={clsx(\n                                            style.colorButton,\n                                            isCurrent && (highlight ? style.highlight : style.selected),\n                                        )}\n                                    >\n                                        {item.color.map((color, index) => (\n                                            <span\n                                                key={`color-${index}`}\n                                                className={clsx(\n                                                    style.colorPreview,\n                                                    color === \"transparent\" && style.colorTransparent,\n                                                    maxColorIndex === index && style.colorPreviewLast,\n                                                )}\n                                                style={{ backgroundColor: color }}\n                                            />\n                                        ))}\n                                        {getAllowEmptyIcon(item)}\n                                    </button>\n                                    {label && (\n                                        <span className={clsx(style.label, disabled && style.disabled)}>{label}</span>\n                                    )}\n                                </div>\n                            );\n\n                        default:\n                            return (\n                                <Button\n                                    id={elementId}\n                                    onClick={() => onChange(item)}\n                                    isActive={isCurrent}\n                                    title={getTitle(item)}\n                                    aria-label={getAriaLabel(item)}\n                                    disabled={disabled}\n                                    className={clsx(style.button, isCurrent && highlight && style.highlight)}\n                                >\n                                    {getIcon(item)}\n                                    {getPreview(item, i18nRegistry)}\n                                    {label && (\n                                        <span className={clsx(item.icon || item.preview ? style.label : null)}>\n                                            {label}\n                                        </span>\n                                    )}\n                                    {getAllowEmptyIcon(item)}\n                                </Button>\n                            );\n                    }\n                })}\n            </div>\n        </>\n    );\n}\n\nEditor.propTypes = {\n    value: PropTypes.string,\n    commit: PropTypes.func.isRequired,\n    i18nRegistry: PropTypes.object.isRequired,\n    options: PropTypes.shape({\n        layout: PropTypes.oneOf([\"grid\", \"flex\", \"list\", \"color\"]),\n        columns: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n        maximalColumns: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n        allowEmpty: PropTypes.bool,\n        iconSize: PropTypes.oneOf([\"xs\", \"sm\", \"lg\", \"2x\", \"3x\"]),\n        values: PropTypes.objectOf(\n            PropTypes.shape({\n                label: PropTypes.string,\n                icon: PropTypes.string,\n                iconRotate: PropTypes.number,\n                description: PropTypes.string,\n                color: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n                hidden: PropTypes.bool,\n                preview: PropTypes.string,\n                previewFull: PropTypes.bool,\n                disabled: PropTypes.bool,\n            }),\n        ),\n\n        dataSourceIdentifier: PropTypes.string,\n        dataSourceUri: PropTypes.string,\n        dataSourceDisableCaching: PropTypes.bool,\n        dataSourceAdditionalData: PropTypes.objectOf(PropTypes.any),\n    }).isRequired,\n};\n\nfunction processColorValues(values) {\n    if (!Array.isArray(values)) {\n        return [];\n    }\n    values = values\n        .map((item) => ({\n            ...item,\n            color: processColor(item.color),\n        }))\n        .filter((item) => item.color);\n\n    return values;\n}\n\nfunction processColor(color) {\n    if (!color || (typeof color !== \"string\" && !Array.isArray(color))) {\n        return null;\n    }\n    if (typeof color === \"string\") {\n        return [color];\n    }\n    color = color.filter(Boolean);\n    if (color.length < 1) {\n        return null;\n    }\n    return color;\n}\n\nfunction getPreview(item, i18nRegistry) {\n    if (!item || !item.preview) {\n        return null;\n    }\n    const preview = item.preview;\n    const fullClass = item.previewFull ? style.imageFull : null;\n    const label = i18nRegistry.translate(item.description || item.label);\n\n    if (preview.startsWith(\"<svg \")) {\n        return (\n            <div\n                className={clsx(style.imageSVG, fullClass)}\n                aria-label={label}\n                dangerouslySetInnerHTML={{ __html: preview }}\n            />\n        );\n    }\n\n    const src = preview.startsWith(\"resource://\") ? `/_Resources/Static/Packages/${preview.substr(11)}` : preview;\n    return <img src={src} className={clsx(style.image, fullClass)} alt={label} />;\n}\n\nfunction flattenValues(values, layout, i18nRegistry) {\n    if (!values || typeof values !== \"object\") {\n        return [];\n    }\n\n    const array = [];\n\n    for (const value in values) {\n        const item = values[value];\n        if (item.hidden) {\n            continue;\n        }\n        array.push({\n            ...item,\n            value,\n        });\n    }\n    if (layout === \"color\") {\n        return processColorValues(array);\n    }\n    return array;\n}\n\nconst neosifier = neos((globalRegistry) => ({\n    i18nRegistry: globalRegistry.get(\"i18n\"),\n    dataSourcesDataLoader: globalRegistry.get(\"dataLoaders\").get(\"DataSources\"),\n}));\nconst connector = connect((state) => ({\n    focusedNodePath: selectors.CR.Nodes.focusedNodePathSelector(state),\n}));\nexport default neosifier(connector(Editor));\n", "function r(e){var t,f,n=\"\";if(\"string\"==typeof e||\"number\"==typeof e)n+=e;else if(\"object\"==typeof e)if(Array.isArray(e)){var o=e.length;for(t=0;t<o;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=\" \"),n+=f)}else for(f in e)e[f]&&(n&&(n+=\" \"),n+=f);return n}export function clsx(){for(var e,t,f=0,n=\"\",o=arguments.length;f<o;f++)(e=arguments[f])&&(t=r(e))&&(n&&(n+=\" \"),n+=t);return n}export default clsx;", "import manifest from \"@neos-project/neos-ui-extensibility\";\n\nimport ToggleEditor from \"./ToggleEditor\";\n\nmanifest(\"Beromir.ToggleEditor:Editor\", {}, (globalRegistry) => {\n    const editorsRegistry = globalRegistry.get(\"inspector\").get(\"editors\");\n\n    editorsRegistry.set(\"Beromir.ToggleEditor/Editor\", {\n        component: ToggleEditor,\n        hasOwnLabel: true,\n    });\n});\n"],
  "mappings": "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",
  "names": ["readFromConsumerApi", "key", "args", "init_readFromConsumerApi", "__esmMin", "require_react", "__commonJSMin", "exports", "module", "init_readFromConsumerApi", "readFromConsumerApi", "require_prop_types", "__commonJSMin", "exports", "module", "init_readFromConsumerApi", "readFromConsumerApi", "require_react_ui_components", "__commonJSMin", "exports", "module", "init_readFromConsumerApi", "readFromConsumerApi", "require_neos_ui_decorators", "__commonJSMin", "exports", "module", "init_readFromConsumerApi", "readFromConsumerApi", "require_react_redux", "__commonJSMin", "exports", "module", "init_readFromConsumerApi", "readFromConsumerApi", "require_neos_ui_redux_store", "__commonJSMin", "exports", "module", "init_readFromConsumerApi", "readFromConsumerApi", "init_readFromConsumerApi", "dist_default", "readFromConsumerApi", "import_react", "import_prop_types", "import_react_ui_components", "import_neos_ui_decorators", "import_react_redux", "import_neos_ui_redux_store", "r", "e", "t", "f", "n", "o", "clsx", "clsx_default", "getDataLoaderOptionsForProps", "props", "defaultOptions", "Editor", "mergedOptions", "layout", "values", "columns", "maximalColumns", "allowEmpty", "iconSize", "disabled", "dataSourceIdentifier", "dataSourceUri", "dataSourceAdditionalData", "value", "commit", "highlight", "i18nRegistry", "id", "dataSourcesDataLoader", "label", "hasDataSource", "isLoading", "setIsLoading", "options", "setOptions", "flattenValues", "dataSourceOptionsAsJSON", "setDataSourceOptionsAsJSON", "dataAsJSON", "processColorValues", "React", "clsx_default", "style_default", "resetLabel", "onChange", "item", "node", "convertToColumns", "items", "e", "getColumns", "evaluatedColumns", "evaluatedMaximalColumns", "getIcon", "getTitle", "getAriaLabel", "getAllowEmptyIcon", "className", "index", "elementId", "isCurrent", "currentTarget", "getPreview", "maxColorIndex", "color", "PropTypes", "processColor", "preview", "fullClass", "src", "array", "neosifier", "globalRegistry", "connector", "state", "ToggleEditor_default", "dist_default", "globalRegistry", "ToggleEditor_default"]
}
