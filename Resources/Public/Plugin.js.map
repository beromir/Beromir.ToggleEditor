{
  "version": 3,
  "sources": ["../../node_modules/.pnpm/@neos-project+neos-ui-extensibility@8.3.10/node_modules/@neos-project/neos-ui-extensibility/src/readFromConsumerApi.ts", "../../node_modules/.pnpm/@neos-project+neos-ui-extensibility@8.3.10/node_modules/@neos-project/neos-ui-extensibility/src/shims/vendor/react/index.js", "../../node_modules/.pnpm/@neos-project+neos-ui-extensibility@8.3.10/node_modules/@neos-project/neos-ui-extensibility/src/shims/vendor/prop-types/index.js", "../../node_modules/.pnpm/@neos-project+neos-ui-extensibility@8.3.10/node_modules/@neos-project/neos-ui-extensibility/src/shims/neosProjectPackages/react-ui-components/index.js", "../../node_modules/.pnpm/@neos-project+neos-ui-extensibility@8.3.10/node_modules/@neos-project/neos-ui-extensibility/src/shims/neosProjectPackages/neos-ui-decorators/index.js", "../../node_modules/.pnpm/@neos-project+neos-ui-extensibility@8.3.10/node_modules/@neos-project/neos-ui-extensibility/src/shims/vendor/react-redux/index.js", "../../node_modules/.pnpm/@neos-project+neos-ui-extensibility@8.3.10/node_modules/@neos-project/neos-ui-extensibility/src/shims/neosProjectPackages/neos-ui-redux-store/index.js", "../../node_modules/.pnpm/@neos-project+neos-ui-extensibility@8.3.10/node_modules/@neos-project/neos-ui-extensibility/src/index.ts", "../Private/Editor/ToggleEditor/index.jsx", "../Private/Editor/ToggleEditor/Components/Icons.jsx", "../../node_modules/.pnpm/clsx@2.1.1/node_modules/clsx/dist/clsx.mjs", "../Private/Editor/ToggleEditor/utils.js", "../Private/Editor/ToggleEditor/Components/PreviewImage.jsx", "../Private/Editor/ToggleEditor/Components/SinglePreview.jsx", "../Private/Editor/ToggleEditor/Components/Wrapper.jsx", "../Private/Editor/manifest.js"],
  "sourcesContent": [null, null, null, null, null, null, null, null, "import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button, Icon, Label, CheckBox } from \"@neos-project/react-ui-components\";\nimport { neos } from \"@neos-project/neos-ui-decorators\";\nimport style from \"./style.module.css\";\nimport { connect } from \"react-redux\";\nimport { selectors } from \"@neos-project/neos-ui-redux-store\";\nimport { Icons, PreviewImage, Wrapper } from \"./Components\";\nimport { flattenValues, processColorValues, getItemVariants } from \"./utils\";\nimport clsx from \"clsx\";\n\nconst getDataLoaderOptionsForProps = (props) => ({\n    contextNodePath: props.focusedNodePath,\n    dataSourceIdentifier: props.options.dataSourceIdentifier,\n    dataSourceUri: props.options.dataSourceUri,\n    dataSourceAdditionalData: props.options.dataSourceAdditionalData,\n    dataSourceDisableCaching: Boolean(props.options.dataSourceDisableCaching),\n});\n\nconst defaultOptions = {\n    layout: \"grid\",\n    maximalColumns: 4,\n    values: {},\n    columns: null,\n    allowEmpty: false,\n    multiple: false,\n    iconSize: null,\n    disabled: false,\n    hidden: false,\n    dataSourceIdentifier: null,\n    dataSourceUri: null,\n};\n\nfunction Editor(props) {\n    const mergedOptions = { ...defaultOptions, ...props.options };\n    const {\n        layout,\n        values,\n        columns,\n        maximalColumns,\n        iconSize,\n        disabled,\n        dataSourceIdentifier,\n        dataSourceUri,\n        dataSourceAdditionalData,\n        multiple,\n    } = mergedOptions;\n    const allowEmpty = multiple || mergedOptions.allowEmpty;\n    const { value, commit, highlight, i18nRegistry, id, dataSourcesDataLoader, renderHelpIcon } = props;\n    const label = i18nRegistry.translate(props.label);\n\n    if (multiple && !Array.isArray(value)) {\n        console.warn(\n            `Misconfiguration in property \"${props.identifier}\". Multiple is activated but value type seems to be \"string\" but should be \"array\".`,\n        );\n    }\n\n    const hasDataSource = !!(dataSourceIdentifier || dataSourceUri);\n\n    const [isLoading, setIsLoading] = useState(hasDataSource);\n    const [options, setOptions] = useState(hasDataSource ? [] : flattenValues(values, layout, i18nRegistry));\n    const [active, setActive] = useState(Array.isArray(value) ? value : [value]);\n\n    // We use this hack to prevent the editor from re-rendering all the time, even if the options are the same.\n    const [dataSourceOptionsAsJSON, setDataSourceOptionsAsJSON] = useState(null);\n\n    useEffect(() => {\n        const dataAsJSON = JSON.stringify({ dataSourceIdentifier, dataSourceUri, dataSourceAdditionalData });\n        if (!hasDataSource || dataSourceOptionsAsJSON === dataAsJSON) {\n            return;\n        }\n\n        setDataSourceOptionsAsJSON(dataAsJSON);\n\n        // Load options from data source\n        dataSourcesDataLoader.resolveValue(getDataLoaderOptionsForProps(props), value).then((values) => {\n            setIsLoading(false);\n            if (values.hidden) {\n                setOptions({ hidden: true });\n                return;\n            }\n\n            if (layout === \"color\") {\n                setOptions(processColorValues(values));\n                return;\n            }\n            setOptions(values);\n        });\n    }, [dataSourceIdentifier, dataSourceUri, dataSourceAdditionalData]);\n\n    if (isLoading) {\n        return (\n            <Wrapper\n                id={id}\n                label={label}\n                className={style.loading}\n                title={i18nRegistry.translate(\"Beromir.ToggleEditor:Main:loading\")}\n                renderHelpIcon={renderHelpIcon}\n            >\n                <Icon icon=\"spinner\" size=\"lg\" spin />\n            </Wrapper>\n        );\n    }\n\n    if (options.hidden) {\n        return null;\n    }\n\n    if (!options || !options.length) {\n        return (\n            <Wrapper id={id} label={label} className={style.error} renderHelpIcon={renderHelpIcon}>\n                {i18nRegistry.translate(\n                    `Beromir.ToggleEditor:Main:error.${hasDataSource ? \"noDataFromSource\" : \"noNodeTypeDefintion\"}`,\n                )}\n            </Wrapper>\n        );\n    }\n\n    function itemIsActive(item) {\n        return active.includes(item.value);\n    }\n\n    function onChange(item, node) {\n        if (node) {\n            node.blur();\n        }\n        if (!item) {\n            // No item is set, so we reset the value\n            // This should not happen, but we handle it anyway\n            commit(multiple ? [] : \"\");\n            setActive([]);\n            return;\n        }\n\n        const valueFromItem = item.value;\n\n        // we'd like to have a copy instead of ref\n        let activeItems = [...active];\n        const valueIsAlreadyActive = activeItems.includes(valueFromItem);\n        if (!multiple) {\n            // Toggle single value\n            activeItems = valueIsAlreadyActive ? [] : [valueFromItem];\n        } else if (valueIsAlreadyActive) {\n            activeItems.splice(activeItems.indexOf(valueFromItem), 1);\n        } else {\n            activeItems.push(valueFromItem);\n        }\n\n        // if allowEmpty is false but new active length will be 0, drop changes\n        if (!allowEmpty && activeItems.length === 0) {\n            return;\n        }\n\n        setActive(activeItems);\n\n        // if multiple is deisabled, we return array the first value\n        if (!multiple) {\n            activeItems = activeItems[0] || \"\";\n        }\n        commit(activeItems);\n    }\n\n    const convertToColumns = (value, maximalColumns = 0) => {\n        if (typeof value === \"number\" && value > 0) {\n            return value;\n        }\n        const items = options.length || 1;\n        if (!value || typeof value !== \"string\") {\n            return items;\n        }\n        try {\n            value = value.replaceAll(\"{items}\", items);\n            if (maximalColumns) {\n                value = value.replaceAll(\"{maximalColumns}\", items);\n            }\n            // eslint-disable-next-line no-new-func\n            const evaluateFn = new Function(`return Math.floor(${value})`);\n            return evaluateFn();\n        } catch (e) {\n            console.warn('An error occurred while trying to evaluate \"' + value + '\"\\n', e);\n        }\n    };\n\n    const getColumns = () => {\n        const evaluatedColumns = convertToColumns(columns, maximalColumns);\n        const evaluatedMaximalColumns = convertToColumns(maximalColumns);\n        return { \"--columns\": Math.min(evaluatedColumns, evaluatedMaximalColumns) };\n    };\n\n    const resetLabel = i18nRegistry.translate(\"Beromir.ToggleEditor:Main:reset\");\n    const AllowEmptyIcon = ({ item, className = style.allowEmpty }) =>\n        allowEmpty && !multiple ? (\n            <span className={clsx(className, itemIsActive(item) && style.allowEmptyShow)}>\n                <Icon size=\"sm\" icon=\"times\" />\n            </span>\n        ) : null;\n\n    return (\n        <Wrapper\n            id={id}\n            label={label}\n            className={[style[layout], disabled && style.disabled]}\n            style={getColumns()}\n            setIdOnWrapper={false}\n            renderHelpIcon={renderHelpIcon}\n        >\n            {options.map((item, index) => {\n                const elementId = index === 0 ? id : null;\n                const isCurrent = itemIsActive(item);\n                const disabled = item.disabled;\n                const state = isCurrent ? \"active\" : \"default\";\n\n                const labels = getItemVariants(item, \"label\", true, (value) => i18nRegistry.translate(value));\n                const descriptions = getItemVariants(item, \"description\", true, (value) =>\n                    i18nRegistry.translate(value),\n                );\n                const label = labels?.[state];\n                const description = descriptions?.[state];\n\n                const title = description || label;\n                const ariaLabel = isCurrent && allowEmpty ? resetLabel : title;\n\n                switch (layout) {\n                    case \"list\":\n                        if (multiple) {\n                            return (\n                                <Label\n                                    id={elementId}\n                                    className={style.listButton}\n                                    title={title}\n                                    aria-label={ariaLabel}\n                                    key={index}\n                                >\n                                    <CheckBox\n                                        isChecked={isCurrent}\n                                        disabled={disabled}\n                                        onChange={() => onChange(item)}\n                                    />\n                                    <Icons item={item} isCurrent={isCurrent} size={iconSize} />\n                                    <PreviewImage item={item} isCurrent={isCurrent} />\n                                    {label && <span>{label}</span>}\n                                </Label>\n                            );\n                        }\n\n                        return (\n                            <button\n                                id={elementId}\n                                onClick={({ currentTarget }) => onChange(item, currentTarget)}\n                                type=\"button\"\n                                title={title}\n                                aria-label={ariaLabel}\n                                disabled={disabled}\n                                className={clsx(style.listButton, isCurrent && style.selected)}\n                                key={index}\n                            >\n                                <span className={clsx(style.radio, isCurrent && highlight && style.highlight)}>\n                                    <span></span>\n                                </span>\n                                <Icons item={item} isCurrent={isCurrent} size={iconSize} />\n                                <PreviewImage item={item} isCurrent={isCurrent} />\n                                {label && <span>{label}</span>}\n                                <AllowEmptyIcon item={item} className={style.allowEmptyRadio} />\n                            </button>\n                        );\n\n                    case \"color\":\n                        const maxColorIndex = item.color.length - 1;\n                        return (\n                            <div className={style.colorBox} key={index}>\n                                <button\n                                    id={elementId}\n                                    onClick={({ currentTarget }) => onChange(item, currentTarget)}\n                                    type=\"button\"\n                                    title={title}\n                                    aria-label={ariaLabel}\n                                    disabled={disabled}\n                                    className={clsx(\n                                        style.colorButton,\n                                        isCurrent && (highlight ? style.highlight : style.selected),\n                                    )}\n                                >\n                                    {item.color.map((color, index) => (\n                                        <span\n                                            key={`color-${index}`}\n                                            className={clsx(\n                                                style.colorPreview,\n                                                color === \"transparent\" && style.colorTransparent,\n                                                maxColorIndex === index && style.colorPreviewLast,\n                                            )}\n                                            style={{ backgroundColor: color }}\n                                        />\n                                    ))}\n                                    <AllowEmptyIcon item={item} />\n                                </button>\n                                {label && (\n                                    <span className={clsx(style.label, disabled && style.disabled)}>{label}</span>\n                                )}\n                            </div>\n                        );\n\n                    default:\n                        return (\n                            <Button\n                                id={elementId}\n                                onClick={() => onChange(item)}\n                                isActive={isCurrent}\n                                title={title}\n                                aria-label={ariaLabel}\n                                disabled={disabled}\n                                className={clsx(style.button, isCurrent && highlight && style.highlight)}\n                                key={index}\n                            >\n                                <Icons item={item} isCurrent={isCurrent} size={iconSize} />\n                                <PreviewImage item={item} isCurrent={isCurrent} />\n                                {label && (\n                                    <span className={clsx(item.icon || item.preview ? style.label : null)}>\n                                        {label}\n                                    </span>\n                                )}\n                                <AllowEmptyIcon item={item} />\n                            </Button>\n                        );\n                }\n            })}\n        </Wrapper>\n    );\n}\n\nEditor.propTypes = {\n    value: PropTypes.string,\n    commit: PropTypes.func.isRequired,\n    i18nRegistry: PropTypes.object.isRequired,\n    options: PropTypes.shape({\n        layout: PropTypes.oneOf([\"grid\", \"flex\", \"flex-start\", \"list\", \"color\"]),\n        columns: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n        maximalColumns: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n        allowEmpty: PropTypes.bool,\n        multiple: PropTypes.bool,\n        iconSize: PropTypes.oneOf([\"xs\", \"sm\", \"lg\", \"2x\", \"3x\"]),\n        values: PropTypes.objectOf(\n            PropTypes.shape({\n                label: PropTypes.string,\n                icon: PropTypes.string,\n                iconRotate: PropTypes.number,\n                description: PropTypes.string,\n                color: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n                hidden: PropTypes.bool,\n                preview: PropTypes.string,\n                previewFull: PropTypes.bool,\n                disabled: PropTypes.bool,\n            }),\n        ),\n\n        dataSourceIdentifier: PropTypes.string,\n        dataSourceUri: PropTypes.string,\n        dataSourceDisableCaching: PropTypes.bool,\n        dataSourceAdditionalData: PropTypes.objectOf(PropTypes.any),\n    }).isRequired,\n};\n\nconst neosifier = neos((globalRegistry) => ({\n    i18nRegistry: globalRegistry.get(\"i18n\"),\n    dataSourcesDataLoader: globalRegistry.get(\"dataLoaders\").get(\"DataSources\"),\n}));\nconst connector = connect((state) => ({\n    focusedNodePath: selectors.CR.Nodes.focusedNodePathSelector(state),\n}));\nexport default neosifier(connector(Editor));\n", "import React from \"react\";\nimport { Icon } from \"@neos-project/react-ui-components\";\nimport style from \"../style.module.css\";\nimport clsx from \"clsx\";\nimport { getIconConfig } from \"../utils\";\n\nexport default function Icons({ item, size, isCurrent }) {\n    const config = getIconConfig(item);\n    // Nothing is set, so we return null\n    if (!config) {\n        return null;\n    }\n\n    const { state, rotate, needLayering } = config;\n\n    // We have two previews, so we stack them to avoid a jump in the interface\n    if (needLayering) {\n        return (\n            <span className={style.layered}>\n                <Icon\n                    icon={state.default}\n                    className={style.transition}\n                    style={{ opacity: isCurrent ? 0 : 1, transform: rotate?.default }}\n                    size={size}\n                />\n                <Icon\n                    icon={state.active}\n                    className={style.transition}\n                    style={{ opacity: isCurrent ? 1 : 0, transform: rotate?.active }}\n                    size={size}\n                />\n            </span>\n        );\n    }\n\n    // Only the default is set, so show it always\n    if (state.default) {\n        return (\n            <Icon\n                icon={state.default}\n                className={style.transition}\n                style={{ transform: isCurrent ? rotate?.active : rotate?.default }}\n                size={size}\n            />\n        );\n    }\n\n    // Only the active is set, so show it only when active\n    if (state.active && isCurrent) {\n        return <Icon icon={state.active} style={{ transform: rotate?.active }} size={size} />;\n    }\n\n    // Nothing is set, so we return null\n    return null;\n}\n", "function r(e){var t,f,n=\"\";if(\"string\"==typeof e||\"number\"==typeof e)n+=e;else if(\"object\"==typeof e)if(Array.isArray(e)){var o=e.length;for(t=0;t<o;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=\" \"),n+=f)}else for(f in e)e[f]&&(n&&(n+=\" \"),n+=f);return n}export function clsx(){for(var e,t,f=0,n=\"\",o=arguments.length;f<o;f++)(e=arguments[f])&&(t=r(e))&&(n&&(n+=\" \"),n+=t);return n}export default clsx;", "export const getPreviewConfig = (item) => getIconOrPreviewConfig(\"preview\", item);\nexport const getIconConfig = (item) => getIconOrPreviewConfig(\"icon\", item);\n\nexport function getItemVariants(\n    item,\n    key,\n    activeFallbackToDefault = false,\n    processItem = (value) => value,\n    subkey = \"\",\n) {\n    const activeKey = `${key}Active${subkey}`;\n    const defaultItem = item[key + subkey];\n    let activeItem = item[activeKey];\n\n    if (activeFallbackToDefault && activeItem === undefined) {\n        activeItem = defaultItem;\n    }\n\n    if (defaultItem == undefined && activeItem == undefined) {\n        return null;\n    }\n\n    return {\n        default: processItem(defaultItem),\n        active: processItem(activeItem),\n    };\n}\n\nexport function flattenValues(values, layout) {\n    if (!values || typeof values !== \"object\") {\n        return [];\n    }\n\n    const array = [];\n\n    for (const value in values) {\n        const item = values[value];\n        if (item.hidden) {\n            continue;\n        }\n        array.push({\n            ...item,\n            value,\n        });\n    }\n    if (layout === \"color\") {\n        return processColorValues(array);\n    }\n    return array;\n}\n\nexport function processColorValues(values) {\n    if (!Array.isArray(values)) {\n        return [];\n    }\n    values = values\n        .map((item) => ({\n            ...item,\n            color: processColor(item.color),\n        }))\n        .filter((item) => item.color);\n\n    return values;\n}\n\nfunction processColor(color) {\n    if (!color || (typeof color !== \"string\" && !Array.isArray(color))) {\n        return null;\n    }\n    if (typeof color === \"string\") {\n        return [color];\n    }\n    color = color.filter(Boolean);\n    if (color.length < 1) {\n        return null;\n    }\n    return color;\n}\n\nfunction getIconOrPreviewConfig(type, item) {\n    if (!item) {\n        return null;\n    }\n\n    const state = getItemVariants(item, type);\n    // Nothing is set, so we return null\n    if (!state) {\n        return null;\n    }\n    const needLayering = state.default && state.active;\n    const rotate = getItemVariants(item, type, true, (value) => `rotate(${value || 0}deg)`, \"Rotate\");\n    const label = getItemVariants(\"label\", type, true);\n    const description = getItemVariants(\"description\", true);\n\n    return {\n        type,\n        needLayering,\n        state,\n        label,\n        description,\n        rotate: rotate,\n    };\n}\n", "import React from \"react\";\nimport style from \"../style.module.css\";\nimport SinglePreview from \"./SinglePreview\";\nimport { getPreviewConfig } from \"../utils\";\n\nexport default function PreviewImage({ item, isCurrent }) {\n    const config = getPreviewConfig(item);\n    if (!config) {\n        return null;\n    }\n    const { state, rotate, needLayering, label, description } = config;\n    const fullClass = item.previewFull ? style.imageFull : null;\n\n    // We have two previews, so we stack them to avoid a jump in the interface\n    if (config.needLayering) {\n        return (\n            <span className={style.layered}>\n                <SinglePreview\n                    src={state.default}\n                    className={[style.transition, fullClass]}\n                    style={{ opacity: isCurrent ? 0 : 1, transform: rotate?.default }}\n                    label={description?.default || label?.default}\n                />\n                <SinglePreview\n                    src={state.active}\n                    className={[style.transition, fullClass]}\n                    style={{ opacity: isCurrent ? 1 : 0, transform: rotate?.active }}\n                    label={description?.active || label?.active}\n                />\n            </span>\n        );\n    }\n\n    // Only the default is set, so show it always\n    if (state.default) {\n        return (\n            <SinglePreview\n                src={state.default}\n                className={[style.transition, fullClass]}\n                style={{ transform: isCurrent ? rotate?.active : rotate?.default }}\n                label={description?.default || label?.default}\n            />\n        );\n    }\n\n    // Only the active is set, so show it only when active\n    if (state.active && isCurrent) {\n        return (\n            <SinglePreview\n                src={state.active}\n                className={[style.transition, fullClass]}\n                style={{ transform: rotate?.active }}\n                label={description?.active || label?.active}\n            />\n        );\n    }\n\n    // Nothing is set, so we return null\n    return null;\n}\n", "import React from \"react\";\nimport { neos } from \"@neos-project/neos-ui-decorators\";\nimport style from \"../style.module.css\";\nimport clsx from \"clsx\";\n\nconst neosifier = neos((globalRegistry) => ({\n    i18nRegistry: globalRegistry.get(\"i18n\"),\n}));\nexport default neosifier(SinglePreview);\n\nfunction SinglePreview({ src, className, style, label, i18nRegistry }) {\n    const translatedLabel = i18nRegistry.translate(label);\n    if (src.startsWith(\"<svg \")) {\n        return (\n            <div\n                className={clsx(style.imageSVG, className)}\n                style={style}\n                aria-label={translatedLabel}\n                dangerouslySetInnerHTML={{ __html: src }}\n            />\n        );\n    }\n\n    return (\n        <img\n            className={clsx(style.image, className)}\n            style={style}\n            alt={translatedLabel}\n            src={src.startsWith(\"resource://\") ? `/_Resources/Static/Packages/${src.substr(11)}` : src}\n        />\n    );\n}\n", "import React from \"react\";\nimport { Label } from \"@neos-project/react-ui-components\";\nimport clsx from \"clsx\";\nimport styles from \"../style.module.css\";\n\nexport default function Wrapper({\n    children,\n    label,\n    id,\n    className,\n    setIdOnWrapper = true,\n    title,\n    style,\n    renderHelpIcon,\n}) {\n    if (!children) {\n        return null;\n    }\n\n    return (\n        <>\n            {label && (\n                <Label htmlFor={id}>\n                    {label} {renderHelpIcon()}\n                </Label>\n            )}\n            <div\n                id={setIdOnWrapper ? id : null}\n                className={clsx(styles.wrapper, className)}\n                style={style}\n                title={title}\n            >\n                {children}\n            </div>\n        </>\n    );\n}\n", "import manifest from \"@neos-project/neos-ui-extensibility\";\n\nimport ToggleEditor from \"./ToggleEditor\";\n\nmanifest(\"Beromir.ToggleEditor:Editor\", {}, (globalRegistry) => {\n    const editorsRegistry = globalRegistry.get(\"inspector\").get(\"editors\");\n\n    editorsRegistry.set(\"Beromir.ToggleEditor/Editor\", {\n        component: ToggleEditor,\n        hasOwnLabel: true,\n    });\n});\n"],
  "mappings": "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",
  "names": ["readFromConsumerApi", "key", "args", "init_readFromConsumerApi", "__esmMin", "require_react", "__commonJSMin", "exports", "module", "init_readFromConsumerApi", "readFromConsumerApi", "require_prop_types", "__commonJSMin", "exports", "module", "init_readFromConsumerApi", "readFromConsumerApi", "require_react_ui_components", "__commonJSMin", "exports", "module", "init_readFromConsumerApi", "readFromConsumerApi", "require_neos_ui_decorators", "__commonJSMin", "exports", "module", "init_readFromConsumerApi", "readFromConsumerApi", "require_react_redux", "__commonJSMin", "exports", "module", "init_readFromConsumerApi", "readFromConsumerApi", "require_neos_ui_redux_store", "__commonJSMin", "exports", "module", "init_readFromConsumerApi", "readFromConsumerApi", "init_readFromConsumerApi", "dist_default", "readFromConsumerApi", "import_react", "import_prop_types", "import_react_ui_components", "import_neos_ui_decorators", "import_react_redux", "import_neos_ui_redux_store", "import_react", "import_react_ui_components", "r", "e", "t", "f", "n", "o", "clsx", "clsx_default", "getPreviewConfig", "item", "getIconOrPreviewConfig", "getIconConfig", "getItemVariants", "key", "activeFallbackToDefault", "processItem", "value", "subkey", "activeKey", "defaultItem", "activeItem", "flattenValues", "values", "layout", "array", "processColorValues", "processColor", "color", "type", "state", "needLayering", "rotate", "label", "description", "Icons", "item", "size", "isCurrent", "config", "getIconConfig", "state", "rotate", "needLayering", "React", "style_default", "import_react", "import_react", "import_neos_ui_decorators", "neosifier", "globalRegistry", "SinglePreview_default", "SinglePreview", "src", "className", "style", "label", "i18nRegistry", "translatedLabel", "React", "clsx_default", "PreviewImage", "item", "isCurrent", "config", "getPreviewConfig", "state", "rotate", "needLayering", "label", "description", "fullClass", "style_default", "React", "SinglePreview_default", "import_react", "import_react_ui_components", "Wrapper", "children", "label", "id", "className", "setIdOnWrapper", "title", "style", "renderHelpIcon", "React", "clsx_default", "style_default", "getDataLoaderOptionsForProps", "props", "defaultOptions", "Editor", "mergedOptions", "layout", "values", "columns", "maximalColumns", "iconSize", "disabled", "dataSourceIdentifier", "dataSourceUri", "dataSourceAdditionalData", "multiple", "allowEmpty", "value", "commit", "highlight", "i18nRegistry", "id", "dataSourcesDataLoader", "renderHelpIcon", "label", "hasDataSource", "isLoading", "setIsLoading", "options", "setOptions", "flattenValues", "active", "setActive", "dataSourceOptionsAsJSON", "setDataSourceOptionsAsJSON", "dataAsJSON", "processColorValues", "React", "Wrapper", "style_default", "itemIsActive", "item", "onChange", "node", "valueFromItem", "activeItems", "valueIsAlreadyActive", "convertToColumns", "items", "e", "getColumns", "evaluatedColumns", "evaluatedMaximalColumns", "resetLabel", "AllowEmptyIcon", "className", "clsx_default", "index", "elementId", "isCurrent", "state", "labels", "getItemVariants", "descriptions", "title", "ariaLabel", "Icons", "PreviewImage", "currentTarget", "maxColorIndex", "color", "PropTypes", "neosifier", "globalRegistry", "connector", "ToggleEditor_default", "dist_default", "globalRegistry", "ToggleEditor_default"]
}
